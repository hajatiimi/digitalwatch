INITIALIZER:
    from Tkinter import *
    from DWatchGUI import DWatchGUI

    root = Tk()
    topLevel = Toplevel(root)
    topLevel.resizable(width="NO", height="NO")
    topLevel.title("DWatch")
    gui = DWatchGUI(topLevel,eventhandler)
    eventhandler.start()
    root.mainloop()
    exit()

STATECHART:
    Clock [DS]
        Running [DS]
        Stopped
    Chrono [DS]
        Running
        Stopped [DS]
    Backlight [DS]
        On
        Wait
        Off [DS]
    Display [DS]
        Time [DS]
        Chrono
        Alarm
    EditMode [DS]
        False [DS]
        True
    TimeEditTimer [DS]
        Idle [DS]
        Running
    EditTimeout [DS]
        Idle [DS]
        Running
    EditExitTimer [DS]
        Idle [DS]
        Running
    IncrementTimer [DS]
        Idle [DS]
        Running
    EnterAlarmEditTimer [DS]
        Idle [DS]
        Running


TRANSITION:
    S:  Clock.Running
    N:  Clock.Running
    T:  1
    O:  gui.GUI.increaseTimeByOne()

TRANSITION:
    S:  Clock.Running
    N:  Clock.Stopped
    E:  stopTime

TRANSITION:
    S:  Clock.Stopped
    N:  Clock.Running
    E:  startTime

TRANSITION:
    S:  Backlight.Off
    N:  Backlight.On
    E:  lightOn
    O:  gui.setIndiglo()

TRANSITION:
    S:  Backlight.On
    N:  Backlight.Wait
    E:  lightOff

TRANSITION:
    S:  Backlight.Wait
    N:  Backlight.Off
    T:  2 [OTT]
    O:  gui.unsetIndiglo()

TRANSITION:
    S:  Display.Time
    N:  Display.Time
    T:  0.25
    O:  gui.refreshTimeDisplay()
        gui.refreshDateDisplay()

TRANSITION:
    S:  Display.Chrono
    N:  Display.Chrono
    T:  0.25
    O:  gui.refreshChronoDisplay()

TRANSITION:
    S:  Display.Time
    N:  Display.Chrono
    E:  changeMode
    O:  gui.refreshChronoDisplay()

TRANSITION:
    S:  Display.Chrono
    N:  Display.Time
    E:  changeMode
    O:  gui.refreshTimeDisplay()

TRANSITION:
    S: Display.Alarm
    N: Display.Alarm
    T: 0.25
    O: gui.refreshAlarmDisplay()

TRANSITION:
    S:  Display.Time
    N:  Display.Alarm
    E:  setAlarm
    O:  gui.refreshAlarmDisplay()
        gui.setAlarm()
        gui.eventhandler.event("startEnterAlarmEditTimer")

TRANSITION:
    S: Display.Alarm
    N: Display.Time
    E: exitAlarmDisplay

TRANSITION:
    S:  Chrono.Running
    N:  Chrono.Running
    T:  0.01
    O:  gui.increaseChronoByOne()

TRANSITION:
    S:  Chrono.Stopped
    N:  Chrono.Running
    E:  initChrono
    C:  [INSTATE("Display.Chrono")]

TRANSITION:
    S:  Chrono.Running
    N:  Chrono.Stopped
    E:  initChrono
    C:  [INSTATE("Display.Chrono")]

TRANSITION:
    S:  Chrono.Running
    N:  Chrono.Running
    E:  resetChrono
    C:  [INSTATE("Display.Chrono")]
    O:  gui.resetChrono()

TRANSITION:
    S:  Chrono.Stopped
    N:  Chrono.Stopped
    E:  resetChrono
    C:  [INSTATE("Display.Chrono")]
    O:  gui.resetChrono()

TRANSITION:
    S:  TimeEditTimer.Idle
    N:  TimeEditTimer.Running
    C:  [INSTATE("EditMode.False")]
    E:  editTime

TRANSITION:
    S:  TimeEditTimer.Running
    N:  TimeEditTimer.Idle
    T:  1.5
    O:  gui.startSelection()
        gui.eventhandler.event("stopTime")
        gui.eventhandler.event("enterEditMode")
        gui.eventhandler.event("startEditTimeoutTimer")

TRANSITION:
    S:  TimeEditTimer.Running
    N:  TimeEditTimer.Idle
    E:  released

TRANSITION:
    S:  EditExitTimer.Idle
    N:  EditExitTimer.Running
    C:  [INSTATE("EditMode.True")]
    E:  finishEdit

TRANSITION:
    S:  EditExitTimer.Running
    N:  EditExitTimer.Idle
    T:  2
    O:  gui.stopSelection()
        gui.eventhandler.event("startTime")
        gui.eventhandler.event("leaveEditMode")
        gui.eventhandler.event("stopEditTimeoutTimer")

TRANSITION:
    S:  EditExitTimer.Running
    N:  EditExitTimer.Idle
    E:  released

TRANSITION:
    S: EditMode.False
    N: EditMode.True
    E: enterEditMode

TRANSITION:
    S: EditMode.True
    N: EditMode.False
    C: [INSTATE("Display.Time")]
    E: leaveEditMode

TRANSITION:
    S: EditMode.True
    N: EditMode.False
    C: [INSTATE("Display.Alarm")]
    E: leaveEditMode
    O: gui.eventhandler.event("exitAlarmDisplay")

TRANSITION:
    S: EditTimeout.Idle
    N: EditTimeout.Running
    E: startEditTimeoutTimer

TRANSITION:
    S:  EditTimeout.Running
    N:  EditTimeout.Idle
    T:  5
    O:  gui.stopSelection()
        gui.eventhandler.event("startTime")
        gui.eventhandler.event("leaveEditMode")

TRANSITION:
    S:  EditTimeout.Running
    N:  EditTimeout.Idle
    E:  stopEditTimeoutTimer

TRANSITION:
    S: EditTimeout.Running
    N: EditTimeout.Running
    E: resetEditTimeoutTimer

TRANSITION:
    S:  IncrementTimer.Idle
    N:  IncrementTimer.Running
    C:  [INSTATE("EditMode.True")]
    E:  increase
    O:  gui.increaseSelection()
        gui.eventhandler.event("resetEditTimeoutTimer")

TRANSITION:
    S:  IncrementTimer.Running
    N:  IncrementTimer.Running
    T:  0.3
    O:  gui.increaseSelection()
        gui.eventhandler.event("resetEditTimeoutTimer")

TRANSITION:
    S:  IncrementTimer.Running
    N:  IncrementTimer.Idle
    E:  stopInc

TRANSITION:
    S:  EnterAlarmEditTimer.Idle
    N:  EnterAlarmEditTimer.Running
    E:  startEnterAlarmEditTimer

TRANSITION:
    S:  EnterAlarmEditTimer.Running
    N:  EnterAlarmEditTimer.Idle
    T:  1.5
    O:  gui.startSelection()
        gui.eventhandler.event("enterEditMode")
        gui.eventhandler.event("startEditTimeoutTimer")

TRANSITION:
    S: EnterAlarmEditTimer.Running
    N: EnterAlarmEditTimer.Idle
    E: onoff
    O: gui.eventhandler.event("exitAlarmDisplay")

# alarming